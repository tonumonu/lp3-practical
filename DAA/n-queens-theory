Aim: Design n-Queens matrix having first Queen placed. Use backtracking to place remaining Queens to generate the final n-queen‗s matrix. 

Objective: 
Students will learn 
1. The Basic Concepts of N Queens Problem 
2. N queens using Backtracking 

Theory: 
The N Queen is the problem of placing N chess queens on an N×N chessboard so that no two queens attack each other. For example, the following is a solution for the 4 Queen problems.
 

expected output is a binary matrix that has 1s for the blocks where queens are placed. For example, the following is the output matrix for the above 4 queen solution. 
{ 0, 1, 0, 0} 
{ 0, 0, 0, 1} 
{ 1, 0, 0, 0} 
{ 0, 0, 1, 0}

Backtracking Algorithm 
The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes, then we backtrack and return false. 
1) Start in the leftmost column 
2) If all queens are placed 
return true 
3) Try all rows in the current column. 
Do following for every tried row. 
a) If the queen can be placed safely in this row 
then mark this [row, column] as part of the 
solution and recursively check if placing 
the queen here leads to a solution. 
b) If placing the queen in [row, column] leads to 
a solution then return true. 
c) If placing queen doesn't lead to a solution then 
unmark this [row, column] (Backtrack) and go to 
step (a) to try other rows. 
4) If all rows have been tried and nothing worked, 
return false to trigger backtracking. 
Time Complexity: O(N!) 

Conclusion: We have studied N Queen Problem using Backtracking Approach.

