A i m :   W r i t e   a   p r o g r a m   n o n - r e c u r s i v e   a n d   r e c u r s i v e   p r o g r a m   t o   c a l c u l a t e   F i b o n a c c i   n u m b e r s   a n d   a n a lyze their time and space complexity. 

Objective: Student will be able to learn 
1. Concept of Fibonacci Numbers. 
2. Analysis of time complexity in Non-Recursive and Recursive way. 

Theory: 
The Fibonacci numbers are the numbers in the following integer sequence. 
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,…….. 
In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation 
Fn = Fn-1 + Fn-2 
With seed values 
F0 = 0 and F1 = 1. 
Non-Recursive Algorithm: 
1 Algorithm fibonacci(n) 
2 //Calculate nth fibonacci number 
3 { 
4 if(n<=1) 
5 write (n); 
6 else 
7 { 
8 fnm2:=0; fnm1:=1; 
9 for i:=2 to n do 
10 { fn:=fnm1+fnm2; 
11 fnm2:=fnm1; 
12 fnm1:=fn; 
13 } 
14 write(fn) 
15 } 
16 } 

Time Complexity: 
Two cases (1) n = 0 or 1 and (2) n>1. 
1. When n = 0 or 1, lines 4 and 5 get executed once each. Since each line has an s/e of 1, the total step count for this case is 2. 
2. When n > 1, lines 4, 8, and 14 are each executed once. Line 9 gets executed n times, and lines 11 and 12 get executed n-1 times each. Line 8 has an s/e of 2, line 12 has an s/e of 2, and line 13 has an s/e of 0. The remaining lines that get executed have s/e‘s of 1. The total steps for the case n > 1 is therefore 4n + 1. 

Recursive Algorithm: 
Algorithm Fibonacci(n) 
{ 
if (n <= 1) 
return n; 
else 
return Fibonacci(n - 1) + Fibonacci(n - 2); } 
Time complexity: 
T(n) = T(n-1) + T(n-2) + c 
= 2T(n-1) + c //from the approximation T(n-1) ~ T(n-2) 
= 2*(2T(n-2) + c) + c 
= 4T(n-2) + 3c 
= 8T(n-3) + 7c 
= 2 k * T(n - k) + (2 k - 1)*c 
Let&#39;s find the value of k for which: n - k = 0 
k = n 
T(n) = 2 n * T(0) + (2 n - 1)*c 
= 2 n * (1 + c) - c 
T(n) = 2 n 

Conclusion: We have studied Recursive and Non-Recursive way to Calculate Fibonacci Numbers.
